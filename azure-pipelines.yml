# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
  
  - job: Build
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '5.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Test the new version!'
      inputs:
       command: 'test'
       projects: '**/*test.csproj'
       publishTestResults: false

    - task: CmdLine@2
      displayName: 'Create .nupkg file'
      inputs:
        script: 'dotnet pack -o $(Build.ArtifactStagingDirectory)'
        
    - task: CopyFiles@2
      displayName: 'Copy .csproj'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/DomainObjects/'
        Contents: 'DomainObjects.csproj'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: Container

- stage: Release
  jobs:
  - job: Release
  - deployment: 'Production'
    displayName: 'Deploy DomainDrivenDesign.DomainObjects to nuget!'
    environment: 'Production'
    strategy: 
      runOnce:
        deploy:
          steps:
          - download: none

          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: 'drop'
              buildType: 'current'
              downloadType: 'single'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $projectContents = cat $(System.ArtifactsDirectory)/drop/DomainObjects.csproj
                $packageVersion = $projectContents -match '\d.\d.\d' -replace '(.*)(\d.\d.\d{1,20})(.*)', '$2'
                $packageLocation = '$(System.ArtifactsDirectory)/drop/DomainDrivenDesign.DomainObjects.' + $packageVersion + '.nupkg'
                dotnet nuget push $packageLocation -k $(nugetkey) -s https://api.nuget.org/v3/index.json
